[General]

# scene visualization
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = false #o arco
*.visualizer.*.mobilityVisualizer.displayVelocities = true #a seta.
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true #os rastros
*.visualizer.*.mobilityVisualizer.animationSpeed = 3

# mobility constraint area
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 1000m

# no configurator needed (there is no communication between hosts)
**.networkConfiguratorModule = ""

#prints
#print-undisposed = false

[Config Mysterio_ex1]
description = "Implementação - Connors"
network = MysterioCommunication
*.UAV[*].mobility.numUAVs = 2
*.numHosts = 2

*.UAV[*].osgModel = "3d/drone.ive.100.scale.0,0,90.rot"
*.CAR.osgModel = "3d/car.ive.50.scale.0,0,90.rot"

#*.host[0].modelURL = "cow.osgb.2.scale.0,0,90.rot.0,0,-15e-1.trans"

*.canvasVisualizer.energyStorageVisualizer.displayEnergyStorages = true #

*.UAV[*].hasStatus = true #

# power
*.UAV[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.UAV[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.UAV[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.UAV[*].energyStorage.nominalCapacity = 0.05J
*.UAV[*].energyManagement.nodeShutdownCapacity = 0.1 * energyStorage.nominalCapacity
*.UAV[*].energyManagement.nodeStartCapacity = 0.5 * energyStorage.nominalCapacity
*.UAV[*].energyStorage.initialCapacity = 0.05J #uniform(0.1 * energyStorage.nominalCapacity, energyStorage.nominalCapacity)
*.UAV[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.UAV[*].energyGenerator.powerGeneration = 4mW
*.UAV[*].energyGenerator.sleepInterval = exponential(25s)
*.UAV[*].energyGenerator.generationInterval = exponential(25s)

*.UAV[*].mobility.typename = "UAVMobility"
*.UAV[*].mobility.changeInterval = 1s
*.UAV[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
*.UAV[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
*.UAV[*].mobility.angleDelta = uniform(-10deg,10deg)
*.UAV[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
*.UAV[*].mobility.speed = uniform(10mps,20mps)
*.UAV[*].mobility.faceForward = false
*.UAV[*].mobility.initialX = 0m
*.UAV[0].mobility.initialY = 100m
*.UAV[1].mobility.initialY = 200m
*.UAV[*].mobility.initialZ = 0m

#**.constraintAreaMinZ = 200m